name: CI Pipeline

on:
  push:
    branches: [ main, master, develop ]
  pull_request:
    branches: [ main, master, develop ]
  workflow_dispatch:

jobs:
  changes:
    runs-on: ubuntu-latest
    outputs:
      python: ${{ steps.changes.outputs.python }}
    steps:
    - uses: actions/checkout@v4
    - name: Check for Python changes
      id: changes
      uses: dorny/paths-filter@v3
      with:
        filters: |
          python:
            - '**/*.py'
            - 'requirements*.txt'
            - 'pyproject.toml'
            - 'tox.ini'
            - '.github/workflows/**'

  test:
    runs-on: ${{ matrix.os }}
    needs: changes
    if: needs.changes.outputs.python == 'true'
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ["3.9", "3.10", "3.11", "3.12", "3.13"]
        exclude:
          # Reduce matrix size for faster builds
          - os: macos-latest
            python-version: "3.9"
          - os: macos-latest
            python-version: "3.10"
          - os: windows-latest
            python-version: "3.9"
            
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
        
    - name: Cache pip dependencies
      uses: actions/cache@v4
      with:
        path: |
          ~/.cache/pip
          ~/.cache/playwright
          .mypy_cache
          .pytest_cache
        key: ${{ runner.os }}-deps-${{ matrix.python-version }}-${{ hashFiles('**/requirements-test.txt', '**/pyproject.toml', '**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-deps-${{ matrix.python-version }}-
          ${{ runner.os }}-deps-
          
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pytest pytest-cov tox
        pip install -r requirements-test.txt
        
    - name: Install Playwright (optional)
      run: |
        pip install "playwright>=1.45.0" || echo "Playwright installation failed, continuing without it"
      continue-on-error: true
        
    - name: Install Playwright browsers (if needed)
      run: |
        playwright install
      continue-on-error: true
        
    - name: Run tests with pytest
      run: |
        pytest --cov=data_processing --cov=data_acquisition --cov=visualization --cov=config --cov-report=xml --cov-report=term-missing --junitxml=test-results.xml -v
        
    - name: Publish Test Results
      uses: dorny/test-reporter@v1
      if: always()
      with:
        name: pytest-results-${{ matrix.python-version }}-${{ matrix.os }}
        path: test-results.xml
        reporter: java-junit
        
    - name: Upload Test Artifacts
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-results-${{ matrix.python-version }}-${{ matrix.os }}
        path: |
          htmlcov/
          test-results.xml
          coverage.xml
          .coverage
        retention-days: 30
        
    - name: Upload coverage to Codecov
      if: matrix.python-version == '3.12' && matrix.os == 'ubuntu-latest'
      uses: codecov/codecov-action@v4
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false
        
    - name: Coverage Report PR Comment
      if: github.event_name == 'pull_request' && matrix.python-version == '3.12' && matrix.os == 'ubuntu-latest'
      uses: py-cov-action/python-coverage-comment-action@v3
      with:
        GITHUB_TOKEN: ${{ github.token }}

  lint:
    runs-on: ubuntu-latest
    needs: changes
    if: needs.changes.outputs.python == 'true'
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python 3.12
      uses: actions/setup-python@v5
      with:
        python-version: "3.12"
        
    - name: Install linting dependencies
      run: |
        python -m pip install --upgrade pip
        pip install flake8 black isort mypy types-tabulate
        
    - name: Run flake8
      id: flake8
      run: flake8 data_processing data_acquisition visualization config tests --max-line-length=88 --extend-ignore=E203,W503
      continue-on-error: true
      
    - name: Check code formatting with black
      id: black
      run: black --check data_processing data_acquisition visualization config tests
      continue-on-error: true
      
    - name: Check import sorting with isort
      id: isort
      run: isort --check-only data_processing data_acquisition visualization config tests --profile black
      continue-on-error: true
      
    - name: Run mypy type checking
      id: mypy
      run: mypy data_processing data_acquisition visualization config --ignore-missing-imports
      continue-on-error: true
      
    - name: Generate Lint Summary
      if: always()
      run: |
        echo "## 🔍 Code Quality Results" >> $GITHUB_STEP_SUMMARY
        echo "| Tool | Status |" >> $GITHUB_STEP_SUMMARY
        echo "|------|--------|" >> $GITHUB_STEP_SUMMARY
        echo "| flake8 | ${{ steps.flake8.outcome == 'success' && '✅' || '❌' }} |" >> $GITHUB_STEP_SUMMARY
        echo "| black | ${{ steps.black.outcome == 'success' && '✅' || '❌' }} |" >> $GITHUB_STEP_SUMMARY
        echo "| isort | ${{ steps.isort.outcome == 'success' && '✅' || '❌' }} |" >> $GITHUB_STEP_SUMMARY
        echo "| mypy | ${{ steps.mypy.outcome == 'success' && '✅' || '❌' }} |" >> $GITHUB_STEP_SUMMARY

  security:
    runs-on: ubuntu-latest
    needs: changes
    if: needs.changes.outputs.python == 'true'
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python 3.12
      uses: actions/setup-python@v5
      with:
        python-version: "3.12"
        
    - name: Install security scanning tools
      run: |
        python -m pip install --upgrade pip
        pip install safety bandit
        
    - name: Run safety check
      run: safety check --file requirements.txt
      continue-on-error: true
      
    - name: Run bandit security scan
      run: bandit -r data_processing data_acquisition visualization config -f json -o bandit-report.json -f sarif -o bandit-results.sarif
      continue-on-error: true
      
    - name: Upload SARIF to GitHub Security
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: bandit-results.sarif
      
    - name: Upload bandit report
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: security-reports
        path: |
          bandit-report.json
          bandit-results.sarif
        retention-days: 30

  summary:
    runs-on: ubuntu-latest
    needs: [changes, test, lint, security]
    if: always() && needs.changes.outputs.python == 'true'
    permissions:
      pull-requests: write
      contents: read
      security-events: write
    steps:
    - name: Generate Pipeline Summary
      run: |
        echo "## 🚀 CI Pipeline Results" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "| Job | Status | Details |" >> $GITHUB_STEP_SUMMARY
        echo "|-----|--------|---------|" >> $GITHUB_STEP_SUMMARY
        echo "| 🧪 Tests | ${{ needs.test.result == 'success' && '✅ Passed' || '❌ Failed' }} | Cross-platform testing |" >> $GITHUB_STEP_SUMMARY
        echo "| 🔍 Linting | ${{ needs.lint.result == 'success' && '✅ Passed' || '❌ Failed' }} | Code quality checks |" >> $GITHUB_STEP_SUMMARY
        echo "| 🔒 Security | ${{ needs.security.result == 'success' && '✅ Passed' || '❌ Failed' }} | Security scanning |" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### 📊 Pipeline Metrics" >> $GITHUB_STEP_SUMMARY
        echo "- **Workflow run**: [${{ github.run_id }}](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})" >> $GITHUB_STEP_SUMMARY
        echo "- **Triggered by**: ${{ github.event_name }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Branch**: ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Commit**: [\`${{ github.sha }}\`](${{ github.server_url }}/${{ github.repository }}/commit/${{ github.sha }})" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        if [[ "${{ needs.test.result }}" == "success" && "${{ needs.lint.result }}" == "success" && "${{ needs.security.result }}" == "success" ]]; then
          echo "### 🎉 All checks passed! Ready to merge." >> $GITHUB_STEP_SUMMARY
        else
          echo "### ⚠️ Some checks failed. Please review the errors above." >> $GITHUB_STEP_SUMMARY
        fi

    - name: Comment PR with Results
      if: github.event_name == 'pull_request'
      uses: marocchino/sticky-pull-request-comment@v2
      with:
        message: |
          ## 🚀 CI Pipeline Results
          
          | Job | Status | Details |
          |-----|--------|---------|
          | 🧪 Tests | ${{ needs.test.result == 'success' && '✅ Passed' || '❌ Failed' }} | Cross-platform testing |
          | 🔍 Linting | ${{ needs.lint.result == 'success' && '✅ Passed' || '❌ Failed' }} | Code quality checks |
          | 🔒 Security | ${{ needs.security.result == 'success' && '✅ Passed' || '❌ Failed' }} | Security scanning |
          
          ${{ (needs.test.result == 'success' && needs.lint.result == 'success' && needs.security.result == 'success') && '### 🎉 All checks passed! Ready to merge.' || '### ⚠️ Some checks failed. Please review the errors.' }}
          
          <details>
          <summary>📊 Pipeline Details</summary>
          
          - **Workflow run**: [${{ github.run_id }}](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})
          - **Commit**: ${{ github.sha }}
          - **Branch**: ${{ github.head_ref }}
          </details>

    - name: Set final status
      run: |
        if [[ "${{ needs.test.result }}" == "success" && "${{ needs.lint.result }}" == "success" && "${{ needs.security.result }}" == "success" ]]; then
          echo "✅ Pipeline completed successfully"
        else
          echo "❌ Pipeline failed"
          exit 1
        fi
