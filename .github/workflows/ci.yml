name: CI Pipeline

on:
  push:
    branches: [ main, master, develop ]
  pull_request:
    branches: [ main, master, develop ]
  workflow_dispatch:

jobs:
  test:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ["3.9", "3.10", "3.11", "3.12", "3.13"]        exclude:
          # Reduce matrix size for faster builds
          - os: macos-latest
            python-version: "3.9"
          - os: macos-latest
            python-version: "3.10"
          - os: windows-latest
            python-version: "3.9"
            
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
        
    - name: Cache pip dependencies
      uses: actions/cache@v4      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements-test.txt', '**/pyproject.toml') }}
        restore-keys: |
          ${{ runner.os }}-pip-
          
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pytest pytest-cov tox
        # Install core dependencies without playwright for testing
        pip install -r requirements-test.txt
        
    - name: Install Playwright (optional)
      run: |
        # Try to install playwright, but don't fail the build if it fails
        pip install "playwright>=1.45.0" || echo "Playwright installation failed, continuing without it"
        
    - name: Install Playwright browsers (if needed)
      run: |
        playwright install
      continue-on-error: true
        
    - name: Run tests with pytest
      run: |
        pytest --cov=data_processing --cov=data_acquisition --cov=visualization --cov=config --cov-report=xml --cov-report=term-missing -v
        
    - name: Upload coverage to Codecov
      if: matrix.python-version == '3.12' && matrix.os == 'ubuntu-latest'
      uses: codecov/codecov-action@v4
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

  lint:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python 3.12
      uses: actions/setup-python@v5
      with:
        python-version: "3.12"
        
    - name: Install linting dependencies
      run: |
        python -m pip install --upgrade pip
        pip install flake8 black isort mypy types-tabulate
        
    - name: Run flake8
      run: flake8 data_processing data_acquisition visualization config tests --max-line-length=88 --extend-ignore=E203,W503
      continue-on-error: true
      
    - name: Check code formatting with black
      run: black --check data_processing data_acquisition visualization config tests
      continue-on-error: true
      
    - name: Check import sorting with isort
      run: isort --check-only data_processing data_acquisition visualization config tests --profile black
      continue-on-error: true
      
    - name: Run mypy type checking
      run: mypy data_processing data_acquisition visualization config --ignore-missing-imports
      continue-on-error: true

  security:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python 3.12
      uses: actions/setup-python@v5
      with:
        python-version: "3.12"
        
    - name: Install security scanning tools
      run: |
        python -m pip install --upgrade pip
        pip install safety bandit
        
    - name: Run safety check
      run: safety check --file requirements.txt
      continue-on-error: true
      
    - name: Run bandit security scan
      run: bandit -r data_processing data_acquisition visualization config -f json -o bandit-report.json
      continue-on-error: true
      
    - name: Upload bandit report
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: bandit-report
        path: bandit-report.json
